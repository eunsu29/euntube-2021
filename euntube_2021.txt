###1 Introduction

# Node.js
브라우저 밖에서 js 사용가능하게 해줌

# npm(Node Package Manger)
Node.js 모듈을 패키지로 만들어 관리, 배포가 가능하고
다른 패키지를 다운받아 사용도 가능하다.


###2 Set up

#0 초기 파일 생성
폴더 생성
VSCode 실행
~ git init // 깃 초기화
git repository 추가하고
~ git remote origin 주소
~ npm init // package.json 생성
index.js 파일 생성

#1 Install Express
package.json에 scripts추가
~ npm run 명령어로 실행
~ npm i express // express설치
dependencies - express실행할 때 필요한 패키지들
delete - node_modules, package-lock.json

#2 Understanding Dependencies
~ npm i // package.json 안의 dependencies의 패키지들만 알아서 설치해줌
.gitignore 파일생성 // 깃허브 업로드시 무시할 파일 설정
	/node_modules

#3 Babel - 최신 자바스크립트를 Nodejs에서 사용 가능하도록 컴파일해줌
@babel/core, @babel/node, @babel/preset-env 설치
dependencies - 프로젝트에 필요한 패키지
		express - 서버를 구동해야하는 프로젝트에 필요
devDependencies - 개발자에게 필요한 패키지
		babel - 최신 코드를 사용하고 싶은 개발자에게 필요
babel.config.json 파일 생성 // ~ touch babel.config.json


#4 Nodemon - 파일이 수정 될 때 babel-node 재시작 해줌
scripts - "dev": "babel-node index.js" // babel-node로 index.js 실행
~ npm i nodemon --save-dev
"dev": "nodemon --exec babel-node index.js" // node index.js -> babel-node index.js


###3 Introduction to  Express

#0 Create Server
src 폴더 생성
src/server.js 파일 생성
express 앱 및 포트할당, 서버 가동

#1 GET Requests pt.1
http 서버끼리 소통

#2 GET Requests pt.2
app생성과 listen 사이에 앱 설정 코드 작성
app.get("/", 함수); // root 페이지에 접근할 시 함수 실행

#3 Responses
GET에는 req, res 2개의 obj가 있다
res.end(); or res.send("문구");

#4 Recap

#5 Middlewares pt.1
req, res, next // next로 다음 handler로 보내줌
app.use(middleware) 아래에 app.get() // 순서중요

#6 Middlewares pt.2

#7 Setup Recap

#8 Servers Recap
브라우저 -> request(listening 가능한 사이트에서만 요청 가능) -> respond
node_modules에서 express import
express app 생성
설정한 PORT listening(종료 전까지 listening 유지)
app.get으로 해당 req에 맞는 res 보내주기

#9 Controllers Recap
모든 handler는 req, res, next를 가지고 있음
res.end(), res.send()

#10 Middleware Recap

#11 External Middlewares
morgan 설치 // method, url, status code 등의 로그를 남겨줌
npm을 통해 외부 middleware도 설치해서 사용 가능


###4 Routers

#0 What are Routers?
Controller와 URL을 관리하기 쉽게 해줌

/ -> Home
/join -> Join
/login -> Login
/search -> Search

/users/edit -> Edit User
//users/delete -> Delete User

/videos/watch -> Watch Video
/videos/edit -> Edit Video
/videos/delete -> Delete Video
/videos/comments -> Comment on a video
/videos/comments/delete -> Delete A Comment of a Video

#1 Making Our Routers
app.get 대신 router.get사용

const userRouter = express.Router();
const handleEditUser = (req, res) => res.send("Edit User");
userRouter.get("/edit", handleEditUser);
app.use("/user", userRouter);

localhost:4000/user/edit주소로 이동 시
app.use에서 /user를 확인 userRouter로 보내주고
userRouter.get에서 /edit를 확인 handleEditUser가 작동

#2 Cleaning the Code
create routers folder
create Routers(.js) files inside routers folder

import express from "express";

~~~

export default ~~~Router;

#3 Exports
js 마지막에 export default ~~~로 할 때에는 1 개밖에 못함
export const ~~~로 하면 여러 개 가능
import { ~~~, ~~~ }로 import

create controllers folder
create Controllers(.js) files insde controllers folder

#4 Router Recap
app.get -> app.use, router.get
use에서 user, video 분류하고 router로 세부 url

#5 Architecture Recap

#6 Planning Routes
/ -> Home
/join -> Join
/login -> Login
/search -> Search

/users/:id -> See User
/users/logout -> Log Out
/users/edit -> Edit My Profile
/users/delete -> Delete My Profile

/videos/:id -> See Video
/videos/:id/edit -> Edit Video
/videos/:id/delete -> Delete Video
/vidoes/upload -> Upload Video

#7 URL Parameters pt.1
/:id // :id를 변수로 인식
/upload를 /:id 위에 위치

#8 URL Parameters pt.2


###5 Templates

#0 Returning HTML

#1 Configuring Pug
~ npm i pug
app.set("view engine", "pug") // server.js
create views folder

pug의 기본 루트 - process.cwd()/views

#2 Partials
app.set("views", process.cwd() + "/src/views") // 루트설정

pug 내부에서 js 사용 방법
#{}안에 삽입

create partials folder
make footer.pug
replace footer of each pug files
-> include partials/footer.pug

#3 Extending Templates
extends base.pug // base.pug을 가져다 씀

base.pug에서 block 블록명으로 지정해주고
base extends할 파일에서
block content
	h1 ~~~
적용완료

#4 Variables to Templates
pug은 controller에서 render할 때 변수 제공 가능
res.render("Home", {pageTitle: "Home"}) // controller.js
title #{pageTitle} | Euntube // base.pug

#5 Recap
app.set("view engine", "pug"); // pug 사용설정
app.set("view", process.cwd() + "/src/views"); /views 경로변경
res.render("home", {pageTitle: "Home"});

include partials/footer.pug // 똑같이 삽입되는 footer include 사용


extends base.pug // ~~~.pug에서 base.pug 붙여넣기

// base.pug
head
	title #{pageTitle} | Euntube // render 될 때 받은 변수로 title 설정

#6 MVP Styles
<link rel="stylesheet" href="https://unpkg.com/mvp.css">

#7 Conditionals
pug에서 if문	

#8 Iteration
each 요소 in array, else 사용가능
	ul
		each video in videos
			li=video
		else
			li Nothing is here

#9 Mixins
video.pug
mixin video(info) // video=mixin name, info=variable
	h4=info.title

home.pug
include mixins/video // including video.pug

each video in videos // videos=variable from videocontroller
	+video(info) // '+' means using mixin, video=mixin name

#10 Recap
if
each else
mixins


###6 MongoDB and Mongoose

#0 Array Database pt.1
req.params.id = id of URL in router
make anchor to move /videos/id in video.pug

#1 Array Database pt.2
href에서 /~~~ 있으면 절대경로(localhost:4000/~~~)로 이동
/ 없이 ~~~ 상대경로(localhost:4000/###/~~~)로 이동

#2 Edit Video pt.1
GET, POST
edit.pug
form(method="POST") // using action="", send URL i want
	input(name="title", placeholder="Video Title", value=video.title, required)
	input(value="Save", type="submit")

#3 Edit Video pt.2
app.use(express.urlencoded({ extended: true })); // form에서 submit한 데이터 req.body로 확인 가능하게 해줌

videoRouter.get("/:id(\\d+)/edit", getEdit);
videoRouter.post("/:id(\\d+)/edit", postEdit);
-> videoRouter.route("/:id(\\d+)/edit").get(getEdit).post(postEdit)

res.redirect(`/videos/${id}`); // after editing, go to watching page

#4 Recap
form에 method POST

route("/~~~/###").get(~~~).post(~~~) // 한 줄로 사용가능

req.params = url
req.body = html body // express.urlencoded({ extended: true}) router 위에 사용
                     // input에는 항상 name이 필요, name이 있어야 req.body로 정보를 받을 수 있다.

#5 More Practice pt.1
make controller first then make router
make upload anchor in base.pug


#6 More Practice pt.2
make Upload function on fake DB with POST Method

#7 Introduction to MongoDB
JSON 형태로 저장(sql이 아님)

#8 Connecting to Mongo
Connect Node.js and MongoDB
mongod, mongo check on terminal

db.js
import mongoose, { mongo } from "mongoose";

mongoose.connect("mongodb://127.0.0.1:27017/euntube", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const db = mongoose.connection;

const handleOpen = () => console.log("✅ Connected to DB");
const handleError = (error) => console.log("❌ DB Error", error);

db.once("open", handleOpen);
db.on("error", handleError);

#9 CRUD Introduction - Create Read Update Delete

#10 Video Model
/models/Video.js
schema 생성

#11 Our First Query pt.1
init.js // import db, model, app

#12 Our First Query pt.2
Video.find() // callback, promise 2 kinds

#13 Async Await = promise

#14 Returns and Renders

#15 Creating a Video pt.1

#16 Creating a Video pt.2
const video = new Video({});
video.save()

Video.create({}) // i can use simple way

#17 Exceptions and Validation
make postUpload()
try {} catch(error) {}
add some conditions at Video.js(DB)

#18 More Schema
schema options(trim, minLength, maxLength, ...)

#19 Video Detail
MongoDB' id is 24 length of hexamical
Video.findbyId() // using Reqular Expression

#20 Edit Video pt.1
edit getEdit function

#21 Edit Video pt.2

#22 Edit Video pt.3
Video.findByIdAndUpdate(id, {modify value})

#23 Middlewares
Middleware는 model이 생성되기 전에 만들어야 한다
Video.pre("save", async function () {}) // this function will run before saving Video

db.collName.remove({}) // 비디오 삭제

#24 Statics
can make funcions inside of Video model
using functions Video.formathashtags like Video.create // do not need to import, import Video only

#25 Delete Video
await Video.findByIdAndDelete(id);

#26 Search pt.1
making search.pug, updating Controller and Router

Video.find().sort({~~~: "options"}) // options : asc, desc

Video Id in URL - req.params // 
send form - req.body // POST method
search form - req.query // URL Data

#27 Search pt.2
find() // []배열로 리턴
findOne() // {}객체로 리턴

Video.find({
      title: {
        $regex: new RegExp(keyword, "i"), 
      },
    });

Regular Expression
i - means doesn't divide upper case and lower case
`^${keyword}` - starts with keyword
`${keyword}$` - ends with keyword

#28 Conclusions


###7 User Authentication

#0 Create Account pt.1
create User.js(model), join.pug(form), controller and router
option in Schema, can use 'unique'

#1 Create Account pt.2
update postJoin

#2 Create Account pt.3
Password Hashing
~ npm i bcrypt // password hash npm
using bcrypt inside of User.pre("save" await function () {})

#3 Form Validation
User.exists({$or:[{condition1},{condition2}]}) // check condition1 or condition2

#4 Status Codes

#5 Login pt.1
create login.pug

#6 Login pt.2
make postLogin() with bcrypt.compare(password, hash)

#7 Sessions and Cookies pt.1
Session is like a memory between browser and backend
~ npm i express-session

#8 Sessions and Cookies pt.2
서버에서 브라우저로 세션 데이터를 전송
세션값을 쿠키에 저장하고 매 요청 때 마다 서버에 전달
이를 통해 서버에서는 세션값으로 유저를 구분할 수 있다.

#9 Logged In User pt.1
req.session.loggedIn = true; // when login successfully

#10 Logged In User pt.2
pug file can access a res.locals object(already imported)
make middlewares.js
res.locals.~~~ = req.session.@@@

#11 Recap

#12 MongoStore
~ npm i connect-mongo
save session to MongoDB, when refreshing backend, still logged in

#13 Uniinitialized Sessions
resave - save sessions every request, even if you modify nothing
saveUninitialized - when create a session, if session is not modified will be not saved

#14 Expiration and Secrets
app.use(session({
					cookie: {
						maxAge: ###}})) // cookie에서 expire를 설정
.env <- hide Strings

#15 Environment Variables
~ npm i dotenv
import "dotenv/config" on 1st line inside of init.js

#16 Github Login pt.1
make oauth app in github
a(href="https://github.com/login/oauth/authorize?client_id=~~~~~~~~")
					
#17 Github Login pt.2
make router and controller to reduce URL on pug
new URLSearchParams(config).tostring();

#18 Github Login pt.3

#19 Github Login pt.4
~ npm i node-fetch

#20 Github Login pt.5
get userdata and emaildata

#21 Github Login pt.6

#22. Logout
req.session.destroy();

#23 Recap


###8 User Profile

#0 Edit Profile GET

#1 Protector and Public Middlewares
make middlewares divide logged in or not
Router.route("/~~~").all(middleware).get(~~~).post(~~~) // use middleware both of get and post

#2 Edit Profile POST pt.1

#3 Edit Profile POST pt.2
프로필 수정 시 username, email 중복 사용 안되게 validation
session과 body 값이 다를 경우 사용 중인지 체크

#4 Change Password pt.1
when validate a password, using bcrypt
await bcrypt.compare(newone, DB one)

#5 Change Password pt.2
findByIdAndUpdate( id, { ~~~ }, {new: true}) // new: true = 업데이트 되는 내용 외에 내용을 리턴받음

#6 File Uploads pt.1
~ npm i multer // multer 형식으로 파일 업로드 시켜줌
multer process only multipart
form(enctype="multipart/form-data") // enctype 추가
label(for="##"), input(id="##") // 동일하게 작성
req.file이 추가됨

#7 File Uploads pt.2
Never upload files on DB
post(uploadFiles.single("avatar"), postEdit); // "avatar" = input(name="avatar")

#8 Static Files and Recap
app.use("/uploads", express.static("folder name")) // folder를 노출함

#9 Video Upload
post(uploadFiles.single("video"), postUpload)
can limit filesize in middleware // limits: { fileSize: { ### }}

#10 User Profile
make user profile page

#11 Video Owner pt.1
add a ref for connecting User and Video models
owner{ type: mongoose.Schema.Types.ObjectId, required: true, ref:{ "modelname" } }

#12 Video Owner pt.2
When uploading video, add owner in Video
ref로 모델끼리 연결해줘서 비디오를 검색할 때 populate로 owner 값을 함께 찾아올 수 있다.
const video = await Video.findById(id);
const owner = await User.findById(video.owner._id)
=> const video = await Video.findById(id).populate("owner");

#13 User's Videos
Add videos array in User Schema
Add video id in User

#14 Bugfix
User모델 pre.save에서 비밀번호가 수정되었을 때만 해쉬하게 수정
if (this.isModified("password")) { ### }

Edit, Delete 업로드한 사람만 가능하게

#15 Conclusions


###9 WEBPACK

#0 Introduction to Webpack
css가 이해할 수 있도록 변환해줌 바벨처럼

#1 Webpack Configuration pt.1
~ npm i webpack webpack-cli -D(or --save-dev)
webpack.config.js // 웹팩 설정파일
entry - 입력파일
output - 결과

#2 Webpack Configuration pt.2
path.resolve(__dirname) // __dirname : 프로젝트 폴더 경로
entry - 입력
output - 변환후 저장
moduel:{rules} - 옵션

#3 Webpack Configuration pt.3
add scripts on package.json

#4 SCSS Loader
install sass-loader, css-loader, style-loader
scss -> css -> style순으로 변환
use: [ "style-loader", "css-loader", "sass-loader" ] // webpack works from behind

#5 MiniCssExtractPlugin
~ npm i mini-css-extract-plugin -D
using MiniCssExtractPlugin, devide css file and js file in individual folders

#6 Better Developer Experience
module.exports:{
	watch: true, // 변화를 관찰하고 저장 시 파일 재생성
	output: {
		clean: true, // if restart wepack, before creating ouputfiles, delete existing ouputfiles
	}
}

.gitignore에 assets폴더 추가

scripts 변경
dev:server, dev:assets

#7 Recap


###10 STYLES

#0 Introduction
add font-awesome in base.pug
match scss folders and views folders
reset html in styles.scss with import file

#1 Styles pt.1
video diplay 방식 grid(표처럼)

#2 Styles pt.2

#3 Styles Conclusions


###11 VIDEO PLAYER

#0 Player Setup
in webpack, can use object on entry
can use [name] // variable to save files with entry names

#1 Play Pause
can use option in scss
input:not(input[type="range"]) { ### }
video.play() or video.pause()

#2 Mute and Unmute
video.muted = true or false

#3 Volume
make global variable volumeValue and use volumeRange.addEventListener("input") tracking changes

#4 Duration and Current Time
video.addEventListener("loadedmetadata", ###) // total time
video.addEventListener("timeupdate", ###) // current time

#5 Time Formatting
using new Date().toISOString make format JAN 01 1970 00:00:00
and .substr to cut and use

#6 Timeline
using input(type="range") make timeline
set maximum value with video.duration

#7 Fullscreen
videoContainer.requestFullscreen(); // videoContainer = div
document.exitFullscreen();
can check in fullscreen or not with document.fullscreenElement return null or element

#8 Controls Events pt.1
addEventListener("mousemove") // when mouse in
addEventListener("mouseleave") // when mouse out
setTimeout(()=>{},ms) // return timeout id
clearTimeout // cancel timeout with id

#9 Controls Events pt.2
const handleMouseMove = () => {
  if (controlsMovementTimeout) {
    clearTimeout(controlsMovementTimeout); // when mouse moves, cancel timeout
    controlsMovementTimeout = null;
  }
  videoControls.classList.add("showing");
  controlsMovementTimeout = setTimeout(hideControls, 3000); // also set timeout. if mouse stop, control is hided
};

#10 Recap

#11 Styles Recap


###12 VIEWS API

#0 Register View Controller
make apiRouter and controller(registerView)
using fetch

#1 Register View Event
data-attribute
can save any information with name like data-###
access with divname.dataset.### // behind of data- will be a name in dataset

#2 Conclusions


###13 VIDEO RECORDER

#0 Recorder Setup
make recorder.js and add on webpack.config.js
navigator.mediaDevices.getUserMedia({ audio: true, video: true, }); // can get audio and video
resolve regenerator-runtime error

#1 Video Preview
video.srcObject = stream
video.play()

#2 Recording Video pt.1
const recorder = new MediaRecorder(stream,{ MimeType: "video/webm" })

recorder.ondataavailable = (event) => {
	event.data // can use video with data
}

recorder.start() / recorder.stop()

#3 Recording Video pt.2
const videoFile = URL.createObjectURL(event.data)
video.srcObject = null;
video.src = videoFile

#4 Downloading the File
const a = document.createElement("a")
a.href = videoFile
a.download = "파일명.webm"
a.click()

#5 Recap


###14 WEBASSEMBLY

#0 Introduction
~ npm i @ffmpeg/ffmpeg @ffmpeg/core

#1 Transcode Video

#2 Download Transcoded Video

#3 Thumbnail

#4 Recap

#5 Thumbnail Upload pt.1
add thumbNail in Video Model Schema
add from in upload.pug

#6 Thumbnail Upload pt.2
change using single -> using fields, using req.file -> using req.files
req.files.video[0] // video is an array
fields([{ name: "video" }, { name: "thumb" }])


###15 FLASH MESSAGES

#0 Installation
~ npm i express-flash
app.use(flash());
req.flash("종류", "내용")
req.locals.messages // can access in pug

#1 Sending Messages
make mixin
style css


###16 COMMENT SECTION

#0 Introduction

#1 Comment Models
make Comment Model

#2 Comment Box
update watch.pug for comment
make commentSection.js with using dataset(when go to watch page set a dataset)

#3 API Route pt.1
update api router, video controller
make handleSubmit with fetch // fetch doesn't change a url

#4 API Route pt.2
send a data from front-end to back-end
app.use(express.json());
JSON -> String -> JSON
when send a data, it looks like a string so need to inform with headers
fetch("address", {
	method: "POST",
	headers: {
		"Content-Type": "application/json",
	},
	body: JSON.stringify({ text }),
})

#5 Commenting
make createComment

#6 Rendering Comments
.populate("comments")
video.comments.push(comment_id);
add html comments and style css

#7 Realtime Comments
when receive status 201, add comment with createElement, appendChild and prependChild

#8 Comment Ids
코멘트 작성자와 로그인 유저가 같을 때 삭제 버튼 보이기
realtime comment에 dataset id 추가
sendStatus -> status().json()

#9 Recap and Challange


###17 DEPLOYMENT

#0 Building the Backend pt.1
~ npm install --save-dev @babel/core @babel/cli // install babel cli
add script - "build:server": "babel src -d build" // babel로 컴파일, -d set the directory
add build folder in .gitignore
add script - "start": "node build/init.js"

#1 #0 Building the Backend pt.2
regeneratorRuntime Error is caused by async and await. import "regenerator-runtime"; for resolve

#2 Building the Frontend
can set the mode in webpack.config.js when using script -> "dev:assets": "webpack --mode=development -w"
add script "build":"npm run build:server && npm run build:assets"

#3 Deploying to Heroku
create a new app on heroku.com
$ brew tap heroku/brew && brew install heroku
~ heroku login for check heroku installed well
~ git push heroku master

#4 MongoDB Atlas
make project and database using free tier
set Keys and Values on heroku.com settings(Config Vars)
set Key : DB_URL, Value : mongodb+srv://eunsu:<password>@cluster0.zonul.mongodb.net/myFirstDatabase?retryWrites=true&w=majority // mongodb password
set Key : COOKIE_SECRET, Value : anything what you want

#5 Environment Variables
heroku.com -> settings -> reveal config vars
.env, GH_SECRET, GH_CLIENT

#6 Github and AWS S3 pt.1
heroku.com -> deploy -> github
enable automatic deploys

#7 Github and AWS S3 pt.2
aws.amazon.com -> s3 -> 버킷 만들기
iam -> 사용자 추가 // make API Key
ㄴ권한설정 -> AmazonS3FullAccess
add AWS_ID, AWS_SECRET
~ npm i --save multer-s3
~ npm i aws-sdk
modify middlewares.js

#8 Github and AWS S3 pt.3
modify bucket permissions
update path in img, src, etc...

#9 Production Environment
const isHeroku = process.env.NODE_ENV === "production";

















































































