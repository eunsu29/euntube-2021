###1 Introduction

# Node.js
브라우저 밖에서 js 사용가능하게 해줌

# npm(Node Package Manger)
Node.js 모듈을 패키지로 만들어 관리, 배포가 가능하고
다른 패키지를 다운받아 사용도 가능하다.


###2 Set up

#0 초기 파일 생성
폴더 생성
VSCode 실행
~ git init // 깃 초기화
git repository 추가하고
~ git remote origin 주소
~ npm init // package.json 생성
index.js 파일 생성

#1 Install Express
package.json에 scripts추가
~ npm run 명령어로 실행
~ npm i express // express설치
dependencies - express실행할 때 필요한 패키지들
delete - node_modules, package-lock.json

#2 Understanding Dependencies
~ npm i // package.json 안의 dependencies의 패키지들만 알아서 설치해줌
.gitignore 파일생성 // 깃허브 업로드시 무시할 파일 설정
	/node_modules

#3 Babel - 최신 자바스크립트를 Nodejs에서 사용 가능하도록 컴파일해줌
@babel/core, @babel/node, @babel/preset-env 설치
dependencies - 프로젝트에 필요한 패키지
		express - 서버를 구동해야하는 프로젝트에 필요
devDependencies - 개발자에게 필요한 패키지
		babel - 최신 코드를 사용하고 싶은 개발자에게 필요
babel.config.json 파일 생성 // ~ touch babel.config.json


#4 Nodemon - 파일이 수정 될 때 babel-node 재시작 해줌
scripts - "dev": "babel-node index.js" // babel-node로 index.js 실행
~ npm i nodemon --save-dev
"dev": "nodemon --exec babel-node index.js" // node index.js -> babel-node index.js


###3 Introduction to  Express

#0 Create Server
src 폴더 생성
src/server.js 파일 생성
express 앱 및 포트할당, 서버 가동

#1 GET Requests pt.1
http 서버끼리 소통

#2 GET Requests pt.2
app생성과 listen 사이에 앱 설정 코드 작성
app.get("/", 함수); // root 페이지에 접근할 시 함수 실행

#3 Responses
GET에는 req, res 2개의 obj가 있다
res.end(); or res.send("문구");

#4 Recap

#5 Middlewares pt.1
req, res, next // next로 다음 handler로 보내줌
app.use(middleware) 아래에 app.get() // 순서중요

#6 Middlewares pt.2

#7 Setup Recap

#8 Servers Recap
브라우저 -> request(listening 가능한 사이트에서만 요청 가능) -> respond
node_modules에서 express import
express app 생성
설정한 PORT listening(종료 전까지 listening 유지)
app.get으로 해당 req에 맞는 res 보내주기

#9 Controllers Recap
모든 handler는 req, res, next를 가지고 있음
res.end(), res.send()

#10 Middleware Recap

#11 External Middlewares
morgan 설치
npm을 통해 외부 middleware도 설치해서 사용 가능


###4 Routers

#0 What are Routers?
Controller와 URL을 관리하기 쉽게 해줌

/ -> Home
/join -> Join
/login -> Login
/search -> Search

/users/edit -> Edit User
//users/delete -> Delete User

/videos/watch -> Watch Video
/videos/edit -> Edit Video
/videos/delete -> Delete Video
/videos/comments -> Comment on a video
/videos/comments/delete -> Delete A Comment of a Video

#1 Making Our Routers
app.get 대신 router.get사용

const userRouter = express.Router();
const handleEditUser = (req, res) => res.send("Edit User");
userRouter.get("/edit", handleEditUser);
app.use("/user", userRouter);

localhost:4000/user/edit주소로 이동 시
app.use에서 /user를 확인 userRouter로 보내주고
userRouter.get에서 /edit를 확인 handleEditUser가 작동

#2 Cleaning the Code
create routers folder
create Routers(.js) files inside routers folder

import express from "express";

~~~

export default ~~~Router;

#3 Exports
js 마지막에 export default ~~~로 할 때에는 1 개밖에 못함
export const ~~~로 하면 여러 개 가능
import { ~~~, ~~~ }로 import

create controllers folder
create Controllers(.js) files insde controllers folder

#4 Router Recap
app.get -> app.use, router.get
use에서 user, video 분류하고 router로 세부 url

#5 Architecture Recap

#6 Planning Routes
/ -> Home
/join -> Join
/login -> Login
/search -> Search

/users/:id -> See User
/users/logout -> Log Out
/users/edit -> Edit My Profile
/users/delete -> Delete My Profile

/videos/:id -> See Video
/videos/:id/edit -> Edit Video
/videos/:id/delete -> Delete Video
/vidoes/upload -> Upload Video































